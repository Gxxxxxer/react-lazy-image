{
  "name": "React-lazy-image",
  "tagline": "Component to render images and lazyload them if are in the viewport (or near to them).",
  "body": "# react-lazy-image\r\nComponent to render images and lazyload them if are in the viewport (or near to them).\r\n\r\nThis component extends from `React.PureComponent` so it needs React.js v15.3.0 or superior.\r\n\r\n## Installation\r\n```bash\r\nnpm i -S react-lazy-image\r\n```\r\n\r\n## Usage example\r\n```jsx\r\nimport Image from 'react-lazy-image';\r\n\r\nconst image = <Image source=\"https://placekitten.com/200/300\" />;\r\n```\r\n\r\n## API\r\n\r\n### `onLayout({ element: Object }): void`\r\nCalled everytime the component is rendered or updated. Default: `() => {}`.\r\n\r\n### `onError({ element: Object, error: Error }): void`\r\nCalled if the request to load the image failed. Default: `() => {}`.\r\n\r\n### `onLoad({ element: Object }): void`\r\nCalled after the load ended (either successfully or not). Default: `() => {}`.\r\n\r\n### `onLoadEnd({ element: Object }): void`\r\nCalled after the load ended successfully. Default: `() => {}`.\r\n\r\n### `onLoadStart({ element: Object }): void`\r\nCalled when the request started. Default: `() => {}`.\r\n\r\n### `onAbort({ element: Object }): void`\r\nCalled if the load of the image was aborted. Default: `() => {}`.\r\n\r\n### `onProgress({ element: Object }): void`\r\nCalled everytime the AJAX progress event is dispatched. Default: `() => {}`.\r\n\r\n### `offset: ?number`\r\nSet the amount of pixel near the viewport the component should be to start the image load. Default: `0`.\r\n\r\n### `source: string`\r\nThe image source path to load.\r\n\r\n### `defaultSource: ?string`\r\nThe default image source path or base64. If isn't defined then it uses a SVG animated spinner.\r\n\r\n### `type: ?string`\r\nThe format type of the image (`png`, `svg+xml`, `jpg` or `gif`). Default: `*`.\r\n\r\n### `minLoaded: ?number`\r\nThe minimum download percentaje to avoid aborting the request if the image leaves the viewport. Default: `50`.\r\n\r\n## Common `img` attributes\r\nThis component allow the usage of common `img` attributes like `alt`, `width`, `className`, etc. So you can use it as a normal `img` tag, just change `src` to `source` and (if you want to) add the other optional props.\r\n\r\n## License\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Sergio Daniel Xalambr√≠\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}